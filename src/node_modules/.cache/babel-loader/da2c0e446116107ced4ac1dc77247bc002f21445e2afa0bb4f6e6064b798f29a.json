{"ast":null,"code":"// проверка на ввод имени\nfunction valFullName(fullName) {\n  let isValid = false;\n  // Проверяем, есть ли в имени хотя бы два слова на кириллице\n  if (/^[А-Яа-яЁё]+\\s[А-Яа-яЁё]+(\\s[А-Яа-яЁё]+)?$/.test(fullName)) {\n    isValid = true;\n  }\n  return isValid;\n}\n;\nfunction valPhoneNumber(phoneNumber) {\n  const cleaned = phoneNumber.replace(/\\D/g, '');\n  return cleanedPhoneNumber.lenght;\n  const phoneNumberPattern = /^(?:\\+7|8)\\d{10}$/;\n  return phoneNumberPattern.test(cleaned);\n}\n;\nfunction valFutureDate(date) {\n  const selectedDate = new Date(date);\n  const currentDate = new Date();\n  selectedDate.setHours(0, 0, 0, 0);\n  currentDate.setHours(0, 0, 0, 0);\n  const nextDay = new Date(currentDate);\n  nextDay.setDate(currentDate.getDate() + 1);\n  return selectedDate.getTime() >= nextDay.getTime();\n}\n;\nfunction valBirthDate(date) {\n  const BirthDate = new Date(date);\n  const minBirthDate = new Date('01-01-2006');\n  return BirthDate.getTime() <= minBirthDate.getTime();\n}\nexport { valFullName, valFutureDate, valPhoneNumber, valBirthDate };","map":{"version":3,"names":["valFullName","fullName","isValid","test","valPhoneNumber","phoneNumber","cleaned","replace","cleanedPhoneNumber","lenght","phoneNumberPattern","valFutureDate","date","selectedDate","Date","currentDate","setHours","nextDay","setDate","getDate","getTime","valBirthDate","BirthDate","minBirthDate"],"sources":["/workspaces/exam-zakharushkin-222k/exam-zakharushkin-222k/src/components/forms/utils.js"],"sourcesContent":["// проверка на ввод имени\nfunction valFullName(fullName) {\n    let isValid = false;\n    // Проверяем, есть ли в имени хотя бы два слова на кириллице\n    if (/^[А-Яа-яЁё]+\\s[А-Яа-яЁё]+(\\s[А-Яа-яЁё]+)?$/.test(fullName)) {\n        isValid = true;\n    }\n    return isValid;\n};\n  \n\nfunction valPhoneNumber(phoneNumber) {\n    const cleaned = phoneNumber.replace(/\\D/g, '');\n    return cleanedPhoneNumber.lenght \n    const phoneNumberPattern = /^(?:\\+7|8)\\d{10}$/;\n    return phoneNumberPattern.test(cleaned);\n\n\n  };\n    \n\n  \n  function valFutureDate(date) {\n    const selectedDate = new Date(date);\n    const currentDate = new Date();\n    \n    selectedDate.setHours(0, 0, 0, 0);\n    currentDate.setHours(0, 0, 0, 0);\n    \n    const nextDay = new Date(currentDate);\n    nextDay.setDate(currentDate.getDate() + 1);\n    \n    return selectedDate.getTime() >= nextDay.getTime();\n  };\n    \n  function valBirthDate(date) {\n    const BirthDate = new Date(date);\n    const minBirthDate = new Date('01-01-2006');\n    return BirthDate.getTime() <= minBirthDate.getTime();\n  }\n  \nexport {\n    valFullName, \n    valFutureDate,\n    valPhoneNumber,\n    valBirthDate\n}\n      "],"mappings":"AAAA;AACA,SAASA,WAAWA,CAACC,QAAQ,EAAE;EAC3B,IAAIC,OAAO,GAAG,KAAK;EACnB;EACA,IAAI,4CAA4C,CAACC,IAAI,CAACF,QAAQ,CAAC,EAAE;IAC7DC,OAAO,GAAG,IAAI;EAClB;EACA,OAAOA,OAAO;AAClB;AAAC;AAGD,SAASE,cAAcA,CAACC,WAAW,EAAE;EACjC,MAAMC,OAAO,GAAGD,WAAW,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC9C,OAAOC,kBAAkB,CAACC,MAAM;EAChC,MAAMC,kBAAkB,GAAG,mBAAmB;EAC9C,OAAOA,kBAAkB,CAACP,IAAI,CAACG,OAAO,CAAC;AAGzC;AAAC;AAID,SAASK,aAAaA,CAACC,IAAI,EAAE;EAC3B,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EACnC,MAAMG,WAAW,GAAG,IAAID,IAAI,CAAC,CAAC;EAE9BD,YAAY,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACjCD,WAAW,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAEhC,MAAMC,OAAO,GAAG,IAAIH,IAAI,CAACC,WAAW,CAAC;EACrCE,OAAO,CAACC,OAAO,CAACH,WAAW,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAE1C,OAAON,YAAY,CAACO,OAAO,CAAC,CAAC,IAAIH,OAAO,CAACG,OAAO,CAAC,CAAC;AACpD;AAAC;AAED,SAASC,YAAYA,CAACT,IAAI,EAAE;EAC1B,MAAMU,SAAS,GAAG,IAAIR,IAAI,CAACF,IAAI,CAAC;EAChC,MAAMW,YAAY,GAAG,IAAIT,IAAI,CAAC,YAAY,CAAC;EAC3C,OAAOQ,SAAS,CAACF,OAAO,CAAC,CAAC,IAAIG,YAAY,CAACH,OAAO,CAAC,CAAC;AACtD;AAEF,SACIpB,WAAW,EACXW,aAAa,EACbP,cAAc,EACdiB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}